name: Auto Rebase PR

on:
  # Allow trigger on issue commented created
  issue_comment:
    types: [created]

# Sets up concurrency to ensure that only one job or workflow using the same concurrency group will run at a time.
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

jobs:
  auto-rebase:
    name: Auto-rebase PR

    # Specify the job to run on the latest Ubuntu version
    runs-on: ubuntu-latest

    if: github.event.issue.pull_request != null && contains(github.event.comment.body, '/rebase')

    steps:
      # https://github.com/actions/create-github-app-token
      - name: Get Token
        id: app-token
        uses: actions/create-github-app-token@31c86eb3b33c9b601a1f60f98dcbfd1d70f379b4 # v1.10.3
        with:
          app-id: ${{ secrets.GIT_AUTOMATION_APP_ID }}
          private-key: ${{ secrets.GIT_AUTOMATION_PK }}

      # https://github.com/actions/github-script
      - name: Acknowledge the rebase request
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            await github.rest.reactions.createForIssueComment({
              owner: context.payload.repository.owner.login,
              repo: context.payload.repository.name,
              comment_id: context.payload.comment.id,
              content: '+1',
            });

      # https://github.com/actions/github-script
      - name: Rebase the PR
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const owner = context.payload.repository.owner.login;
            const repo = context.payload.repository.name;
            const pull_number = context.payload.issue.number;

            try {
              const response = await github.rest.pulls.updateBranch({
                owner,
                repo,
                pull_number
              });

              if (response.status !== 202) {
                throw new Error('Failed to rebase: Status = ' + response.status);
              }
            } catch (error) {
              core.setFailed(`Failed to rebase PR #${pull_number}: ${error.message}`);

              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: pull_number,
                body: `There was an issue rebasing this PR. Error: \`${error.message}\`.\n\nPlease check for conflicts or try again later.`
              });
            }