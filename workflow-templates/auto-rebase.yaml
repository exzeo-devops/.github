name: Auto Rebase PR

on:
  # Allow trigger on issue commented created
  issue_comment:
    types: [created]

# Sets up concurrency to ensure that only one job or workflow using the same concurrency group will run at a time.
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

jobs:
  auto-rebase:
    name: Auto-rebase PR

    # Specify the job to run on the latest Ubuntu version
    runs-on: ubuntu-latest

    if: github.event.issue.pull_request != null && contains(github.event.comment.body, '/rebase')

    steps:
      # https://github.com/actions/create-github-app-token
      - name: Get Token
        id: app-token
        uses: actions/create-github-app-token@31c86eb3b33c9b601a1f60f98dcbfd1d70f379b4 # v1.10.3
        with:
          app-id: ${{ secrets.GIT_AUTOMATION_APP_ID }}
          private-key: ${{ secrets.GIT_AUTOMATION_PK }}

      # https://github.com/actions/checkout
      - name: Checkout repo
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          token: ${{ steps.app-token.outputs.token }}
          fetch-depth: 0

      - name: Rebase the PR
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const { owner, repo } = context.repo;
            const pull_number = context.payload.pull_request.number;

            try {
              // Trigger a rebase using the GitHub API
              const response = await github.pulls.updateBranch({
                owner,
                repo,
                pull_number
              });

              if (response.status === 202) {
                core.info(`PR #${pull_number} has been successfully rebased.`);

                // Add a reaction (thumbs up) to the original comment
                await github.reactions.createForIssueComment({
                  owner,
                  repo,
                  comment_id: context.payload.comment.id,
                  content: 'thumbs_up'
                });

              } else {
                throw new Error('Failed to rebase');
              }
            } catch (error) {
              core.setFailed(`Failed to rebase PR #${pull_number}: ${error.message}`);

              // Add a reaction (thumbs up) to the original comment
              await github.reactions.createForIssueComment({
                owner,
                repo,
                comment_id: context.payload.comment.id,
                content: 'fire'
              });

              // Add a comment stating that there was an issue with the rebase
              await github.issues.createComment({
                owner,
                repo,
                issue_number: pull_number,
                body: `There was an issue rebasing this PR. Error: \`${error.message}\`.\n\nPlease check for conflicts or try again later.`
              });              
            }
