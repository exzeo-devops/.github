name: CI

on:
  # Ensure build works in a pull request
  pull_request:
    branches: [ $default-branch ]
    paths:
      - "charts/**"

# Sets up concurrency to ensure that only one job or workflow using the same concurrency group will run at a time.
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

jobs:
  get-changes:
    name: Get charts changes

    # Specify the job to run on the latest Ubuntu version
    runs-on: ubuntu-latest

    outputs:
      changed_charts: ${{ steps.list_files.outputs.changed_charts }}
      has_changes: ${{ steps.list_files.outputs.has_changes }}

    steps:
      # https://github.com/actions/checkout
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      # https://github.com/actions/github-script
      - name: Get list of chart changes
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        id: list_files
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
            });

            const targetFolder = "charts/";
            const folders = new Set();
            
            files.forEach(file => {
              const folderPath = file.filename.split('/').slice(0, -1).join('/');
              if (folderPath.startsWith(targetFolder)) {
                const relativeFolderPath = folderPath.replace(targetFolder, "");
                folders.add(relativeFolderPath);
              }
            });

            const changed_charts = Array.from(folders);        
            core.setOutput("changed_charts", JSON.stringify(changed_charts));
            core.setOutput("has_changes", changed_charts.length > 0);

  test:
    name: Run helm unit tests - ${{ matrix.chart }}

    # Ensure the job runs after the get-changes job
    needs: [get-changes]    

    # Specify the job to run on the latest Ubuntu version
    runs-on: ubuntu-latest

    strategy:
      matrix:
        chart: ${{ fromJson(needs.get-changes.outputs.changed_charts) }}

    steps:
      # https://github.com/actions/checkout
      - name: Checkout repo
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      # https://github.com/azure/setup-helm
      - name: Install Helm
        uses: azure/setup-helm@fe7b79cd5ee1e45176fcad797de68ecaf3ca4814 # v4.2.0

      # https://github.com/docker/login-action
      - name: Login to GHCR
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Helm unit tests
        run: |
          helm plugin install https://github.com/helm-unittest/helm-unittest --version v0.4.4

      - name: Run helm unit tests
        if: ${{ needs.get-changes.outputs.has_changes == 'true' }}
        run: |
          # Get the chart directory
          chart_dir="./charts/${{ matrix.chart }}"

          # Update dependencies and run tests
          helm dependency update ${chart_dir}

          # Run the tests
          if [ -f "${chart_dir}/Makefile" ] && grep -q -E '^test:' "${chart_dir}/Makefile"; then
            make -C ${chart_dir} test;
          else
            helm unittest --strict -f 'unittests/*.yaml' -f 'tests/*.yaml' ${chart_dir};
          fi            

  bump-version:
    name: Bump helm chart version

    needs: [ get-changes, test ]

    # Specify the job to run on the latest Ubuntu version
    runs-on: ubuntu-latest

    # Set write permissions for repository contents
    permissions:
      contents: write      

    steps:
      # https://github.com/actions/checkout
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event.pull_request.head.ref }}
          path: src

      # https://github.com/actions/checkout
      - name: Checkout gh-pages
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0
          path: dest
          ref: gh-pages

      - name: Install PyBump
        run: |
          python3 -m pip install pybump

      - name: Bump version
        if: ${{ needs.get-changes.outputs.has_changes == 'true' }}
        working-directory: src
        run: |
          for chart_name in $(echo '${{ needs.get-changes.outputs.changed_charts }}' | jq -r '.[]'); do
            chart_dir="./charts/${chart_name}"

            latest_version=$(ls "../dest" | grep "^$chart_name-[0-9]*\.[0-9]*\.[0-9]*\.tgz$" |
            sed -E "s/$chart_name-([0-9]+\.[0-9]+\.[0-9]+)\.tgz/\1/" |
            sort -V | tail -n 1)

            # Default to 1.0.0 if no existing version is found
            if [[ -z "$latest_version" ]]; then
                latest_version="1.0.0"
                echo "No existing versions found for $chart_name. Defaulting to $latest_version."
            fi

            IFS='.' read -r major minor patch <<< "$latest_version"

            next_patch=$((patch + 1))
            next_version="$major.$minor.$next_patch"

            echo "Next version for $CHART_NAME: $next_version"
            
            # Bump the version if the chart package exists in gh-pages
            dest_file="../dest/${chart_name}-${next_version}.tgz"
            if [ ! -e "${dest_file}" ]; then
              pybump set --file ${chart_dir}/Chart.yaml --set-version $next_version
            else
              echo "Version ${next_version} already exists for ${chart_name}. Skipping bump."
            fi
          done

          # Commit and push the changes if there are any
          if ! git diff-index --quiet HEAD --; then
            git config user.name "$GITHUB_ACTOR"
            git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
            git add .
            git commit -m "Bump chart versions"
            git push
          fi